{"version":3,"sources":["BooksAPI.js","components/BookOptions.js","components/Book.js","pages/SearchPage.js","components/Bookshelf.js","pages/ListBooksPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","BookOptions","_ref","onClick","updateTheShelf","bookList","bookShelf","shelfBook","filter","item","_useState","useState","_useState2","slicedToArray","value","setValue","react_default","a","createElement","Fragment","className","defaultValue","onChange","e","target","disabled","Book","bgImageURL","title","authors","imageURL","currentClick","allBooks","style","width","height","backgroundImage","BookOptions_BookOptions","SearchPage","showText","showTextHandler","books","setBooks","_useState3","_useState4","filteredBooks","setFilteredBooks","searchForBookHandler","_ref2","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","query","data","sent","length","stop","this","_x","apply","arguments","react_router_dom","to","type","placeholder","map","forEach","key","components_Book","imageLinks","smallThumbnail","Bookshelf","ListBooksPage","currentReadingSection","setCurrentReadingSection","wantToReadSection","setWantToReadSection","_useState5","_useState6","readSection","setReadSection","useEffect","wantToReadShelf","currentlyReadingShelf","readShelf","components_Bookshelf","allBook","BooksApp","text","setText","render","setRender","updateShelf","BooksAPI","prevState","_x2","setTimeout","_callee2","_context2","getData","react_router","path","element","pages_ListBooksPage","pages_SearchPage","container","document","getElementById","createRoot","src_App","tab"],"mappings":"4PAAMA,EAAM,wCAGRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAC/BC,SAAS,IACTC,QAAQ,IAEb,IAAMC,EAAU,CACdC,OAAQ,mBACRC,cAAeR,GAaJS,EAAS,SAACC,EAAMC,GAAP,OACpBC,MAAK,GAAAC,OAAId,EAAJ,WAAAc,OAAiBH,EAAKI,IAAM,CAC/BC,OAAQ,MACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEV,YACtBW,KAAK,SAACC,GAAD,OAASA,EAAIC,UC9BVC,SAAc,SAAAC,GAMrB,IALJC,EAKID,EALJC,QACAjB,EAIIgB,EAJJhB,KACAkB,EAGIF,EAHJE,eACAC,EAEIH,EAFJG,SACAC,EACIJ,EADJI,UAMMC,EAAYF,EAASG,OAAO,SAACC,GAAD,OAAUA,EAAKnB,KAAOJ,EAAKI,KALzDoB,EAOsBC,mBACxBL,GAAwBC,EAAU,GAAGpB,OARnCyB,EAAApB,OAAAqB,EAAA,EAAArB,CAAAkB,EAAA,GAOGI,EAPHF,EAAA,GAOUG,EAPVH,EAAA,GAsBJ,OACEI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,UAAQG,aAAcP,EAAOQ,SAdf,SAACC,GACnB,IAAMT,EAAQS,EAAEC,OAAOV,MACvBV,EAAelB,EAAM4B,GACrBC,EAASD,GAGLX,GACFA,MAQIa,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,OAAOW,UAAQ,GAA7B,cAGAT,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,oBAAd,qBACAE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,cAAd,gBACAE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,QAAd,QACAE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,QAAd,aCiBKY,EArDF,SAAAxB,GAYP,IAXJyB,EAWIzB,EAXJyB,WACAC,EAUI1B,EAVJ0B,MACAC,EASI3B,EATJ2B,QACAC,EAQI5B,EARJ4B,SACAC,EAOI7B,EAPJ6B,aACA3B,EAMIF,EANJE,eACAlB,EAKIgB,EALJhB,KACAmB,EAIIH,EAJJG,SACA2B,EAGI9B,EAHJ8B,SACA1C,EAEIY,EAFJZ,GACAgB,EACIJ,EADJI,UAWA,OACEU,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,OACEE,UAAU,aACVa,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAA2B,QAAA/C,OAAVsC,GAELG,EAFe,SAK/Bd,EAAAC,EAAAC,cAACmB,EAAD,CACElC,QAAS4B,EACT3B,eAAgBA,EAChBlB,KAAMA,EACNmB,SAAUA,EACV2B,SAAUA,EACV1C,GAAIA,EACJgB,UAAWA,KAGfU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAcQ,GAC7BZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBS,GAAoB,iBC4E5CS,EAzHI,SAAApC,GAKb,IAJJE,EAIIF,EAJJE,eACAmC,EAGIrC,EAHJqC,SACAC,EAEItC,EAFJsC,gBACAR,EACI9B,EADJ8B,SACItB,EACsBC,mBAAS,IAD/BC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAkB,EAAA,GACG+B,EADH7B,EAAA,GACU8B,EADV9B,EAAA,GAAA+B,EAEsChC,mBAAS,IAF/CiC,EAAApD,OAAAqB,EAAA,EAAArB,CAAAmD,EAAA,GAEGE,EAFHD,EAAA,GAEkBE,EAFlBF,EAAA,GA4BEG,EAAoB,eAAAC,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAA0D,EAAAjC,EAAAkC,KAAG,SAAAC,EAAO7B,GAAP,IAAAT,EAAAuC,EAAA,OAAAH,EAAAjC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACrB3C,EAAQS,EAAEC,OAAOV,MACvBgC,EAAiBhC,IACbA,EAHuB,CAAAyC,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EHLRC,EGSsBnC,EAAEC,OAAOV,MHRpD1B,MAAK,GAAAC,OAAId,EAAJ,WAAkB,CACrBgB,OAAQ,OACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAE6D,YAEtB5D,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAAC6D,GAAD,OAAUA,EAAKlB,QGLM,QAInBY,EAJmBE,EAAAK,MAMZC,OAAS,EACpBnB,EAASW,GAGTX,EAAS,IAVca,EAAAE,KAAA,gBAazBf,EAAS,IAbgB,yBAAAa,EAAAO,OHLT,IAACJ,GGKQN,EAAAW,SAAH,gBAAAC,GAAA,OAAAhB,EAAAiB,MAAAF,KAAAG,YAAA,GAiB1B,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMC,GAAG,KACPpD,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gBAAlB,UAEFJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BASbJ,EAAAC,EAAAC,cAAA,SACEmD,KAAK,OACLC,YAAY,4BACZxD,MAAO+B,EACPvB,SAAUyB,MAIhB/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACZmB,GACCvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,sCAGJF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACc,IAAzByB,EAAcgB,OACb7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6CAEAuB,EAAMoB,OAAS,EACjBpB,EAAM8B,IAAI,SAACrF,GACT,IAAIC,EAAQ,OAOZ,OANA6C,EAASwC,QAAQ,SAAC/D,GACZvB,EAAKI,KAAOmB,EAAKnB,KACnBH,EAAQsB,EAAKtB,SAKf6B,EAAAC,EAAAC,cAAA,MAAIuD,IAAKvF,EAAKI,IACZ0B,EAAAC,EAAAC,cAACwD,EAAD,CACE9C,MAAO1C,EAAK0C,MACZE,SACE5C,EAAKyF,WAAazF,EAAKyF,WAAWC,eAAiB,GAErD/C,QAAS3C,EAAK2C,QACdzB,eAAgBA,EAChBlB,KAAMA,EACN6C,aAAcS,EACdnC,SAAUoC,EACVnC,UAAWnB,GAAgB,YAMnC,kDC9EC0F,EApCG,SAAA3E,GAA6D,IAA1DG,EAA0DH,EAA1DG,SAAUmC,EAAgDtC,EAAhDsC,gBAAiBpC,EAA+BF,EAA/BE,eAA+BF,EAAf8B,SAQ9D,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACXf,EAASkE,IAAI,SAAC9D,GACb,OACEO,EAAAC,EAAAC,cAAA,MAAIuD,IAAKhE,EAAKnB,IACZ0B,EAAAC,EAAAC,cAACwD,EAAD,CACE9C,MAAOnB,EAAKmB,MACZD,WAAYlB,EAAKkE,WAAWC,eAC5B7C,aAAcS,EACdlD,GAAImB,EAAKnB,GACTuC,QAASpB,EAAKoB,QACdxB,SAAUA,EACVnB,KAAMuB,EACNL,eAAgBA,YC6FrB0E,EAnHO,SAAA5E,GAAmD,IAAhDsC,EAAgDtC,EAAhDsC,gBAAiBpC,EAA+BF,EAA/BE,eAAgB4B,EAAe9B,EAAf8B,SAAetB,EACbC,mBAAS,IADIC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAkB,EAAA,GAChEqE,EADgEnE,EAAA,GACzCoE,EADyCpE,EAAA,GAAA+B,EAErBhC,mBAAS,IAFYiC,EAAApD,OAAAqB,EAAA,EAAArB,CAAAmD,EAAA,GAEhEsC,EAFgErC,EAAA,GAE7CsC,EAF6CtC,EAAA,GAAAuC,EAGjCxE,mBAAS,IAHwByE,EAAA5F,OAAAqB,EAAA,EAAArB,CAAA2F,EAAA,GAGhEE,EAHgED,EAAA,GAGnDE,EAHmDF,EAAA,GA4DvE,OAjDAG,oBACE,WACE,IAAMC,EAAkBxD,EAASxB,OAC/B,SAACC,GAAD,MAAyB,eAAfA,EAAKtB,QAEXsG,EAAwBzD,EAASxB,OACrC,SAACC,GAAD,MAAyB,qBAAfA,EAAKtB,QAGXuG,EAAY1D,EAASxB,OAAO,SAACC,GAAD,MAAyB,SAAfA,EAAKtB,QACjD6F,EAAyBS,GACzBH,EAAeI,GACfR,EAAqBM,IAGvB,CAACxD,IAmCDhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,qBACkC,IAAjC2D,EAAsBlB,OACrB7C,EAAAC,EAAAC,cAAA,+EAKAF,EAAAC,EAAAC,cAACyE,EAAD,CACEtF,SAAU0E,EACVxC,SAAUC,EACVpC,eAAgBA,EAChBwF,QAAS5D,IAGbhB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,gBAC8B,IAA7B6D,EAAkBpB,OACjB7C,EAAAC,EAAAC,cAAA,oDAEAF,EAAAC,EAAAC,cAACyE,EAAD,CACEtF,SAAU4E,EACVzC,gBAAiBA,EACjBpC,eAAgBA,EAChBwF,QAAS5D,IAGbhB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,QACwB,IAAvBiE,EAAYxB,OACX7C,EAAAC,EAAAC,cAAA,2CAEAF,EAAAC,EAAAC,cAACyE,EAAD,CACEtF,SAAUgF,EACV7C,gBAAiBA,EACjBpC,eAAgBA,MAKxBY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMC,GAAG,WACPpD,EAAAC,EAAAC,cAAA,iCCqEG2E,EA/KE,WAAM,IAAAnF,EAqBKC,mBAAS,IArBdC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAkB,EAAA,GAqBd+B,EArBc7B,EAAA,GAqBP8B,EArBO9B,EAAA,GAAA+B,EAsBGhC,oBAAS,GAtBZiC,EAAApD,OAAAqB,EAAA,EAAArB,CAAAmD,EAAA,GAsBdmD,EAtBclD,EAAA,GAsBRmD,EAtBQnD,EAAA,GAAAuC,EAuBOxE,oBAAS,GAvBhByE,EAAA5F,OAAAqB,EAAA,EAAArB,CAAA2F,EAAA,GAuBda,EAvBcZ,EAAA,GAuBNa,EAvBMb,EAAA,GAqHfc,EAAW,eAAAhG,EAAAV,OAAAyD,EAAA,EAAAzD,CAAA0D,EAAAjC,EAAAkC,KAAG,SAAAC,EAAOlE,EAAMC,GAAb,IAAAkE,EAAA,OAAAH,EAAAjC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACK0C,EAAgBjH,EAAMC,GAD3B,OACZkE,EADYE,EAAAK,KAElBlB,EACE,SAAC0D,GAAD,OAAeA,EAAU5F,OAAO,SAACtB,GAAD,OAAUA,EAAKI,KAAO+D,EAAS/D,MAC/D+D,GAEF4C,GAAWD,GANO,wBAAAzC,EAAAO,SAAAV,EAAAW,SAAH,gBAAAC,EAAAqC,GAAA,OAAAnG,EAAA+D,MAAAF,KAAAG,YAAA,GASX1B,EAAkB,WACtBuD,GAAQ,GACRO,WAAW,WACTP,GAAQ,IAEP,MAcL,OAXAR,oBACE,YACe,eAAAvC,EAAAxD,OAAAyD,EAAA,EAAAzD,CAAA0D,EAAAjC,EAAAkC,KAAG,SAAAoD,IAAA,IAAAlD,EAAA,OAAAH,EAAAjC,EAAAqC,KAAA,SAAAkD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,cAAA+C,EAAA/C,KAAA,EN3HpBrE,MAAK,GAAAC,OAAId,EAAJ,UAAiB,CAAEO,YACrBgB,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAAC6D,GAAD,OAAUA,EAAKlB,QMyHH,OACRY,EADQmD,EAAA5C,KAEdlB,EAASW,GAFK,wBAAAmD,EAAA1C,SAAAyC,EAAAxC,SAAH,yBAAAf,EAAAiB,MAAAF,KAAAG,YAAA,EAIbuC,IAEF,CAACT,IAIDhF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACwF,EAAA,EAAD,KACE1F,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CACEC,KAAK,IACLC,QACE5F,EAAAC,EAAAC,cAAC2F,EAAD,CACEzG,eAAgB8F,EAChBlE,SAAUS,EACVD,gBAAiBA,MAIvBxB,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CACEC,KAAK,SACLC,QACE5F,EAAAC,EAAAC,cAAC4F,EAAD,CACE1G,eAAgB8F,EAChB3D,SAAUuD,EACVtD,gBAAiBA,EACjBR,SAAUS,SCrKlBsE,SAAYC,SAASC,eAAe,SAC7BC,qBAAWH,GAEnBf,OACHhF,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAACiG,EAAD,CAAKC,IAAI","file":"static/js/main.31b72025.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token;\r\nif (!token)\r\n  token = localStorage.token = Math.random()\r\n    .toString(36)\r\n    .substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","import React, { useState } from \"react\";\r\n\r\nexport const BookOptions = ({\r\n  onClick,\r\n  book,\r\n  updateTheShelf,\r\n  bookList,\r\n  bookShelf,\r\n}) => {\r\n  // const [defaultShelf, setDefaultShelf] = useState(\"\");\r\n  // required props\r\n  // required props\r\n\r\n  const shelfBook = bookList.filter((item) => item.id === book.id);\r\n\r\n  const [value, setValue] = useState(\r\n    bookShelf ? bookShelf : shelfBook[0].shelf\r\n  );\r\n\r\n  const updateShelf = (e) => {\r\n    const value = e.target.value;\r\n    updateTheShelf(book, value);\r\n    setValue(value);\r\n    // console.log(value);\r\n    // onClick();\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n  // console.log(bookShelf);\r\n  return (\r\n    <>\r\n      <div className=\"book-shelf-changer\">\r\n        <select defaultValue={value} onChange={updateShelf}>\r\n          <option value=\"move\" disabled>\r\n            Move to...\r\n          </option>\r\n          <option value=\"currentlyReading\">Currently Reading</option>\r\n          <option value=\"wantToRead\">Want to Read</option>\r\n          <option value=\"read\">Read</option>\r\n          <option value=\"none\">None</option>\r\n        </select>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BookOptions } from \"./BookOptions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Book = ({\r\n  bgImageURL,\r\n  title,\r\n  authors,\r\n  imageURL,\r\n  currentClick,\r\n  updateTheShelf,\r\n  book,\r\n  bookList,\r\n  allBooks,\r\n  id,\r\n  bookShelf,\r\n}) => {\r\n  // required props\r\n\r\n  Book.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    authors: PropTypes.array,\r\n    imageURL: PropTypes.string,\r\n    bgImageURL: PropTypes.string,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 193,\r\n              backgroundImage: bgImageURL\r\n                ? `url(\"${bgImageURL}\")`\r\n                : `url(\"${imageURL}\")`,\r\n            }}\r\n          />\r\n          <BookOptions\r\n            onClick={currentClick}\r\n            updateTheShelf={updateTheShelf}\r\n            book={book}\r\n            bookList={bookList}\r\n            allBooks={allBooks}\r\n            id={id}\r\n            bookShelf={bookShelf}\r\n          />\r\n        </div>\r\n        <div className=\"book-title\">{title}</div>\r\n        <div className=\"book-authors\">{authors ? authors : \"Harper Lee\"}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport * as BooksAPI from \"../BooksAPI\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Book from \"../components/Book\";\r\n\r\nconst SearchPage = ({\r\n  updateTheShelf,\r\n  showText,\r\n  showTextHandler,\r\n  allBooks,\r\n}) => {\r\n  const [books, setBooks] = useState([]);\r\n  const [filteredBooks, setFilteredBooks] = useState([]);\r\n\r\n  SearchPage.propTypes = {\r\n    updateTheShelf: PropTypes.func.isRequired,\r\n\r\n    showTextHandler: PropTypes.func.isRequired,\r\n  };\r\n\r\n  // const searchHandler = async (e) => {\r\n  //   const results = await allBooks.filter((item) =>\r\n  //     item.title.toLowerCase().includes(e.target.value)\r\n  //   );\r\n  //   setFilteredBooks(results);\r\n  // };\r\n  // //\r\n  // const search = (e) => {\r\n  //   setFilteredBooks(e.target.value);\r\n  //   searchForBook(e.target.value);\r\n  // };\r\n\r\n  // required props\r\n  // required props\r\n  // SearchPage.propTypes = {\r\n  //   currentClick: PropTypes.func.isRequired,\r\n  // };\r\n\r\n  const searchForBookHandler = async (e) => {\r\n    const value = e.target.value;\r\n    setFilteredBooks(value);\r\n    if (value) {\r\n      const response = await BooksAPI.search(e.target.value);\r\n\r\n      if (response.length > 0) {\r\n        setBooks(response);\r\n        // console.log(response);\r\n      } else {\r\n        setBooks([]);\r\n      }\r\n    } else {\r\n      setBooks([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/\">\r\n            <button className=\"close-search\">Close</button>\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={filteredBooks}\r\n              onChange={searchForBookHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          {showText && (\r\n            <div className=\"show-text\">\r\n              <p>Book added successfully!</p>\r\n            </div>\r\n          )}\r\n          <ol className=\"books-grid\">\r\n            {filteredBooks.length === 0 ? (\r\n              <div>\r\n                <h5>Search for your favorite book:</h5>\r\n              </div>\r\n            ) : books.length > 0 ? (\r\n              books.map((book) => {\r\n                let shelf = \"none\";\r\n                allBooks.forEach((item) => {\r\n                  if (book.id === item.id) {\r\n                    shelf = item.shelf;\r\n                  }\r\n                });\r\n\r\n                return (\r\n                  <li key={book.id}>\r\n                    <Book\r\n                      title={book.title}\r\n                      imageURL={\r\n                        book.imageLinks ? book.imageLinks.smallThumbnail : \"\"\r\n                      }\r\n                      authors={book.authors}\r\n                      updateTheShelf={updateTheShelf}\r\n                      book={book}\r\n                      currentClick={showTextHandler}\r\n                      bookList={books}\r\n                      bookShelf={shelf ? shelf : \"move\"}\r\n                    />\r\n                  </li>\r\n                );\r\n              })\r\n            ) : (\r\n              \"there is no boook includes this characters\"\r\n            )}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPage;\r\n","import React from \"react\";\r\nimport Book from \"./Book\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Bookshelf = ({ bookList, showTextHandler, updateTheShelf, allBooks }) => {\r\n  // required props\r\n  // required props\r\n  Bookshelf.propTypes = {\r\n    bookList: PropTypes.array.isRequired,\r\n    updateTheShelf: PropTypes.func.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"bookshelf\">\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            {bookList.map((item) => {\r\n              return (\r\n                <li key={item.id}>\r\n                  <Book\r\n                    title={item.title}\r\n                    bgImageURL={item.imageLinks.smallThumbnail}\r\n                    currentClick={showTextHandler}\r\n                    id={item.id}\r\n                    authors={item.authors}\r\n                    bookList={bookList}\r\n                    book={item}\r\n                    updateTheShelf={updateTheShelf}\r\n                  />\r\n                </li>\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bookshelf;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Bookshelf from \"../components/Bookshelf\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListBooksPage = ({ showTextHandler, updateTheShelf, allBooks }) => {\r\n  const [currentReadingSection, setCurrentReadingSection] = useState([]);\r\n  const [wantToReadSection, setWantToReadSection] = useState([]);\r\n  const [readSection, setReadSection] = useState([]);\r\n\r\n  ListBooksPage.propTypes = {\r\n    showTextHandler: PropTypes.func.isRequired,\r\n    updateTheShelf: PropTypes.func.isRequired,\r\n    allBooks: PropTypes.array.isRequired,\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      const wantToReadShelf = allBooks.filter(\r\n        (item) => item.shelf === \"wantToRead\"\r\n      );\r\n      const currentlyReadingShelf = allBooks.filter(\r\n        (item) => item.shelf === \"currentlyReading\"\r\n      );\r\n\r\n      const readShelf = allBooks.filter((item) => item.shelf === \"read\");\r\n      setCurrentReadingSection(currentlyReadingShelf);\r\n      setReadSection(readShelf);\r\n      setWantToReadSection(wantToReadShelf);\r\n    },\r\n\r\n    [allBooks]\r\n  );\r\n\r\n  // required props\r\n  // required props\r\n  // ListBooksPage.propTypes = {\r\n  //   showTextHandler: PropTypes.func.isRequired,\r\n  //   currentReading: PropTypes.array.isRequired,\r\n  //   wantToReadList: PropTypes.array.isRequired,\r\n  //   readList: PropTypes.array.isRequired,\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   const checkCurrentBookShelf = () => {\r\n  //     const bookShelf = allBooks.filter(\r\n  //       (item) => item.shelf === \"currentlyReading\"\r\n  //     );\r\n  //     setCurrentReadingSection(bookShelf);\r\n  //   };\r\n  //   const checkWantToReadShelf = () => {\r\n  //     const bookShelf = allBooks.filter((item) => item.shelf === \"wantToRead\");\r\n  //     setWantToReadSection(bookShelf);\r\n  //   };\r\n  //   const readShelf = () => {\r\n  //     const bookShelf = allBooks.filter((item) => item.shelf === \"read\");\r\n  //     setReadSection(bookShelf);\r\n  //   };\r\n  //   checkCurrentBookShelf();\r\n  //   checkWantToReadShelf();\r\n  //   readShelf();\r\n  // }, []);\r\n\r\n  // console.log(currentlyReadingShelf);\r\n  // console.log(wantToReadShelf);\r\n  return (\r\n    <>\r\n      <div className=\"list-books\">\r\n        <div className=\"list-books-title\">\r\n          <h1>MyReads</h1>\r\n        </div>\r\n        <div className=\"list-books-content\">\r\n          <div>\r\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n            {currentReadingSection.length === 0 ? (\r\n              <h5>\r\n                You have no reading books yet!. Search and Add your favorite\r\n                book\r\n              </h5>\r\n            ) : (\r\n              <Bookshelf\r\n                bookList={currentReadingSection}\r\n                showText={showTextHandler}\r\n                updateTheShelf={updateTheShelf}\r\n                allBook={allBooks}\r\n              />\r\n            )}\r\n            <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n            {wantToReadSection.length === 0 ? (\r\n              <h5>Books that you want to read is empty!.</h5>\r\n            ) : (\r\n              <Bookshelf\r\n                bookList={wantToReadSection}\r\n                showTextHandler={showTextHandler}\r\n                updateTheShelf={updateTheShelf}\r\n                allBook={allBooks}\r\n              />\r\n            )}\r\n            <h2 className=\"bookshelf-title\">Read</h2>\r\n            {readSection.length === 0 ? (\r\n              <h5>Read books section is empty!.</h5>\r\n            ) : (\r\n              <Bookshelf\r\n                bookList={readSection}\r\n                showTextHandler={showTextHandler}\r\n                updateTheShelf={updateTheShelf}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"open-search\">\r\n          <Link to=\"/search\">\r\n            <button>Add a book</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListBooksPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport \"./App.css\";\r\nimport SearchPage from \"./pages/SearchPage\";\r\nimport ListBooksPage from \"./pages/ListBooksPage\";\r\n\r\nconst BooksApp = () => {\r\n  // state = {\r\n  //   /**\r\n  //    * TODO: Instead of using this state variable to keep track of which page\r\n  //    * we're on, use the URL in the browser's address bar. This will ensure that\r\n  //    * users can use the browser's back and forward buttons to navigate between\r\n  //    * pages, as well as provide a good URL they can bookmark and share.\r\n  //    */\r\n  //   showSearchPage: false,\r\n  // };\r\n\r\n  // let [state, setState] = useState(false);\r\n\r\n  // const btnSearchHandler = () => {\r\n  //   setState(true);\r\n  // };\r\n\r\n  // const closeSearchHandler = () => {\r\n  //   setState(false);\r\n  // };\r\n\r\n  const [books, setBooks] = useState([]);\r\n  const [text, setText] = useState(false);\r\n  const [render, setRender] = useState(false);\r\n\r\n  // const [currentReadingList, setCurrentReadingList] = useState([]);\r\n  // const [wantToReadList, setWantToReadList] = useState([]);\r\n  // const [readList, setReadList] = useState([]);\r\n\r\n  // const currentReadingBook = async (bookID, value) => {\r\n  //   const response = await BooksAPI.get(bookID);\r\n  //   //start of currentRead section\r\n  //   //start of currentRead section\r\n  //   if (value === \"currentlyReading\") {\r\n  //     const isExistBook = currentReadingList.filter(\r\n  //       (item) => item.id === response.id\r\n  //     );\r\n  //     if (isExistBook.length > 0) {\r\n  //       setCurrentReadingList((prevState) =>\r\n  //         prevState.filter((book) => book.id !== response.id)\r\n  //       );\r\n  //     }\r\n  //     setWantToReadList((prevState) =>\r\n  //       prevState.filter((book) => book.id !== response.id)\r\n  //     );\r\n  //     setReadList((prevState) =>\r\n  //       prevState.filter((book) => book.id !== response.id)\r\n  //     );\r\n  //     setCurrentReadingList((prevState) => [...prevState, response]);\r\n  //     //end of wantToRead Section\r\n  //     //end of wantToRead Section\r\n  //     //\r\n  //     //start of wantToRead Section\r\n  //     //start of wantToRead Section\r\n  //   } else if (value === \"wantToRead\") {\r\n  //     const isExistBook = wantToReadList.filter(\r\n  //       (book) => book.id === response.id\r\n  //     );\r\n  //     if (isExistBook.length > 0) {\r\n  //       setWantToReadList((prevState) =>\r\n  //         prevState.filter((book) => book.id !== response.id)\r\n  //       );\r\n  //     }\r\n  //     setCurrentReadingList((prevState) =>\r\n  //       prevState.filter((book) => book.id !== response.id)\r\n  //     );\r\n  //     setReadList((prevState) =>\r\n  //       prevState.filter((book) => book.id !== response.id)\r\n  //     );\r\n  //     setWantToReadList((prevState) => [...prevState, response]);\r\n  //   }\r\n  //   //end of wantToRead section\r\n  //   //end of wantToRead section\r\n  //   //\r\n\r\n  //   //start of read section\r\n  //   //start of read section\r\n  //   else if (value === \"read\") {\r\n  //     const isInsestBook = readList.filter((book) => book.id === response.id);\r\n  //     if (isInsestBook.length > 0) {\r\n  //       setReadList((prevState) =>\r\n  //         prevState.filter((book) => book.id !== response.id)\r\n  //       );\r\n  //     }\r\n  //     setCurrentReadingList((prevState) =>\r\n  //       prevState.filter((book) => book.id !== response.id)\r\n  //     );\r\n  //     setWantToReadList((prevState) =>\r\n  //       prevState.filter((book) => book.id !== response.id)\r\n  //     );\r\n  //     setReadList((prevState) => [...prevState, response]);\r\n  //   }\r\n  //   //end of read section\r\n  //   //end of read section\r\n  //   if (value === \"none\") {\r\n  //     const checkCurrentBook = currentReadingList.map(\r\n  //       (book) => book.id === response.id\r\n  //     );\r\n  //     const checkReadBook = readList.map((book) => book.id === response.id);\r\n  //     const checkWantToReadBook = wantToReadList.map(\r\n  //       (book) => book.id === response.id\r\n  //     );\r\n\r\n  //     if (checkCurrentBook || checkReadBook || checkWantToReadBook) {\r\n  //       setCurrentReadingList((prevState) =>\r\n  //         prevState.filter((book) => book.id !== response.id)\r\n  //       );\r\n  //       setWantToReadList((prevState) =>\r\n  //         prevState.filter((book) => book.id !== response.id)\r\n  //       );\r\n  //       setReadList((prevState) =>\r\n  //         prevState.filter((book) => book.id !== response.id)\r\n  //       );\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const updateShelf = async (book, shelf) => {\r\n    const response = await BooksAPI.update(book, shelf);\r\n    setBooks(\r\n      (prevState) => prevState.filter((book) => book.id !== response.id),\r\n      response\r\n    );\r\n    setRender(!render);\r\n  };\r\n\r\n  const showTextHandler = () => {\r\n    setText(true);\r\n    setTimeout(() => {\r\n      setText(false);\r\n      // console.log(text);\r\n    }, 3000);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      const getData = async () => {\r\n        const response = await BooksAPI.getAll();\r\n        setBooks(response);\r\n      };\r\n      getData();\r\n    },\r\n    [render]\r\n  );\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Routes>\r\n        <Route\r\n          path=\"/\"\r\n          element={\r\n            <ListBooksPage\r\n              updateTheShelf={updateShelf}\r\n              allBooks={books}\r\n              showTextHandler={showTextHandler}\r\n            />\r\n          }\r\n        />\r\n        <Route\r\n          path=\"search\"\r\n          element={\r\n            <SearchPage\r\n              updateTheShelf={updateShelf}\r\n              showText={text}\r\n              showTextHandler={showTextHandler}\r\n              allBooks={books}\r\n            />\r\n          }\r\n        />\r\n      </Routes>\r\n      {/* {state ? <SearchPage onClick={closeSearchHandler} /> : <ListBooksPage onClick={btnSearchHandler} />} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BooksApp;\r\n","import React from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst container = document.getElementById(\"root\");\r\nconst root = createRoot(container);\r\n\r\nroot.render(\r\n  <BrowserRouter>\r\n    <App tab=\"home\" />\r\n  </BrowserRouter>\r\n);\r\n"],"sourceRoot":""}